for(i in 1:nc){
means[i] <-mean(y[,i] na.rm = removeNA)
}
means
}
columnMean <- function(y, removeNA = TRUE){
nc <-ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <-mean(y[i] na.rm = removeNA)
}
means
}
columnMean <- function(y, removeNA = TRUE){
nc <-ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <-mean(y[,i], na.rm = removeNA)
}
means
}
columnMean(x)
columnMean(airquality)
columnMean(airquality,FALSE)
airquality
add2 <- function(x,y){
x+y
}
above10 <- function(x){
use <- x > 10
x[use]
}
aboveN <- function(x, n = 10){
use <- x > n
x[use]
}
columnMean <- function(y, removeNA = TRUE){
nc <-ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <-mean(y[,i], na.rm = removeNA)
}
means
}
columnMean(airquality,FALSE)
columnMean(airquality,1)
columnMean(airquality)
z <- 5
freeZ <- function(x,y){
x^2 + y/z
}
freeZ(2,4)
freeZ(2,5)
y <-10
f <- function(x){
y <-2
y^2 + g(x)
}
g <- function(x){
x*y
}
g(2)
f(3)
install.packages("caTools")
f(3)
airquality
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
##
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
# build list of files
dir <-normalizePath(directory, winslash = "\\" )
files <- list.files(directory)
#set Working Directory
setwd(dir )
## Initialize vector to hold input
data <- numeric()
## Read each file in directory
for(i in id) {
currentMonitor <- read.csv(files[as.numeric(i)])
if (pollutant == "nitrate"){
## Pull data from column 3 of the source data
K<-3
}
else {
## Pull data from column 2 of the source data
K<-2
}
data <- append(data,na.omit(currentMonitor[,K]))
}
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
return(mean(data,na.rm=TRUE))
}
pollutant <- "nitrate"
pollutantmean("specdata",pollutant,1:23)
pollutantmean("specdata",pollutant,1:23)
getwd()
setwd(paste0(getwd(),'/specdata')
;
setwd()
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
##
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either "sulfate" or
## "nitrate". 'id' is an integer vector indicating the monitor ID numbers to
## be used
# build list of files
files <- list.files(directory)
#set Working Directory
dir <-normalizePath(directory, winslash = "\\" )
setwd(dir )
# ensure output is
options(digits=4)
## Initialize vector to hold input
data <- numeric()
## Read each file in directory
for(i in id) {
currentMonitor <- read.csv(files[as.numeric(i)])
if (pollutant == "nitrate"){
## Pull data from column 3 of the source data
colNum<-3
}
else {
## Pull data from column 2 of the source data
colNum<-2
}
data <- append(data,na.omit(currentMonitor[,colNum]))
}
#return Working Directory
setwd(".." )
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
return(mean(data, na.rm=TRUE))
#
}
clear
cls <-function(){
cat("\014")
}
c;s
cls
source('~/R Programs/cls.R')
cls <-function(){
cat("\014")
}
cls <-function(){
cat("\014")
}
cls
source('~/R Programs/pollutantmean.R')
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
##
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either "sulfate" or
## "nitrate". 'id' is an integer vector indicating the monitor ID numbers to
## be used
# build list of files
files <- list.files(directory)
#set Working Directory
dir <-normalizePath(directory, winslash = "\\" )
setwd(dir )
# ensure output is
options(digits=4)
## Initialize vector to hold input
data <- numeric()
## Read each file in directory
for(i in id) {
currentMonitor <- read.csv(files[as.numeric(i)])
if (pollutant == "nitrate"){
## Pull data from column 3 of the source data
colNum<-3
}
else {
## Pull data from column 2 of the source data
colNum<-2
}
data <- append(data,na.omit(currentMonitor[,colNum]))
}
#return Working Directory
setwd(".." )
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
return(mean(data, na.rm=TRUE))
#
}
source('~/R Programs/pollutantmean.R')
omplete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Check to see if there are any files in the directory passed
if(length(list.files(directory)) == -1)
{
print("No Files Found - Exiting")
return(NULL)
}
# adjust the directory passed to the full path name
path <- paste(getwd(), directory, sep="/")
# build list of files in the directory - make sure
files <- list.files(path, pattern = ".csv", full.names = TRUE)
index <- files[c(id)]
nobs <- NULL
for (i in 1:length(index)) {
data <- read.csv(index[i])
x <- sum(complete.cases(data))
nobs <-c(nobs,x)
}
df <-data.frame(id, nobs)
return(df)
}
View(cls)
View(freeZ)
View(columnMean)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Check to see if there are any files in the directory passed
if(length(list.files(directory)) == -1)
{
print("No Files Found - Exiting")
return(NULL)
}
# adjust the directory passed to the full path name
path <- paste(getwd(), directory, sep="/")
# build list of files in the directory - make sure
files <- list.files(path, pattern = ".csv", full.names = TRUE)
index <- files[c(id)]
nobs <- NULL
for (i in 1:length(index)) {
data <- read.csv(index[i])
x <- sum(complete.cases(data))
nobs <-c(nobs,x)
}
df <-data.frame(id, nobs)
return(df)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## Check to see if there are any files in the directory passed
if(length(list.files(directory)) == -1)
{
print("No Files Found - Exiting")
return(NULL)
}
# adjust the directory passed to the full path name
path <- paste(getwd(), directory, sep="/")
# build list of files in the directory - make sure
files <- list.files(path, pattern = ".csv", full.names = TRUE)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
threshold_list <- subset(complete(directory, 1:length(files)), nobs > threshold)[,"id"]
result = numeric(length(threshold_list))
for (i in seq_along(threshold_list))
source('~/R Programs/pollutantmean_test.R')
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
cls()
source("corr.R");
source("complete.R");
cr<- corr("specdata",150)
head(cr)
summary(cr)
cr<- corr("specdata",400)
head(cr)
summary(cr)
cr<- corr("specdata",5000)
head(cr)
summary(cr)
length(cr)
cr<- corr("specdata")
summary(cr)
length(cr)
source('~/R Programs/corr_test.R')
cls()
source("corr.R");
source("complete.R");
cr<- corr("specdata",150)
head(cr)
summary(cr)
cr<- corr("specdata",400)
head(cr)
summary(cr)
cr<- corr("specdata",5000)
head(cr)
summary(cr)
length(cr)
cr<- corr("specdata")
summary(cr)
length(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## Check to see if there are any files in the directory passed
if(length(list.files(directory)) == -1)
{
print("No Files Found - Exiting")
return(NULL)
}
# adjust the directory passed to the full path name
path <- paste(getwd(), directory, sep="/")
# build list of files in the directory - make sure
files <- list.files(path, pattern = ".csv", full.names = TRUE)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
threshold_list <- subset(complete(directory, 1:length(files)), nobs > threshold)[,"id"]
result = numeric(length(threshold_list))
for (i in seq_along(threshold_list))
{
df <- read.csv(files[threshold_list[i]])
result[i] = cor(df["sulfate"], df["nitrate"], use = "complete.obs")
}
## Return a numeric vector of correlations
result
}
cls()
source("corr.R");
source("complete.R");
cr<- corr("specdata",150)
head(cr)
summary(cr)
cr<- corr("specdata",400)
head(cr)
summary(cr)
cr<- corr("specdata",5000)
head(cr)
summary(cr)
length(cr)
cr<- corr("specdata")
summary(cr)
length(cr)
cls()
source('~/R Programs/complete.R')
cls()
source("corr.R");
source("complete.R");
cr<- corr("specdata",150)
head(cr)
summary(cr)
cr<- corr("specdata",400)
head(cr)
summary(cr)
cr<- corr("specdata",5000)
head(cr)
summary(cr)
length(cr)
cr<- corr("specdata")
summary(cr)
length(cr)
cls()
source("corr.R");
source("complete.R");
cr<- corr("specdata",150)
head(cr)
summary(cr)
cr<- corr("specdata",400)
head(cr)
summary(cr)
cr<- corr("specdata",5000)
head(cr)
summary(cr)
length(cr)
cr<- corr("specdata")
summary(cr)
length(cr)
update.packages(ask='graphics',checkBuilt=TRUE)
q()
install.packages(c("ggplot2", "jsonlite", "openssl"))
install packages("fivethirtyeight")
install.packages("fivethirtyeight")
install.packages(c("digest", "Rcpp", "rprojroot", "tidyr", "xml2"))
install.packages("fivethirtyeight")
install.packages(c("data.table", "digest", "Matrix", "mgcv", "nlme", "stringr", "xml2"))
install.packages("RODBC")
# Load RODBC package
library(RODBC)
# Connect to Access db
#channel <- odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")
channel <- odbcConnectAccess("C:/Users/jcompto8/Documents/Jira Analysis/jiras")
# Get data
data <- sqlQuery( channel , paste ("select *
from general_report"))
# Get data A more complicated example specifying fields
#data <- sqlQuery( channel , paste ("select Year,
#                                   [Name of Student],
#                                   Identification
#                                   from Name_of_table_in_my_database"))
odbcDataSources()
# Load RODBC package
library(RODBC)
# Connect to Access db
#channel <- odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")
#channel <- odbcConnectAccess("C:/Users/jcompto8/Documents/Jira Analysis/jiras")
db<-file.path("C:/Users/jcompto8/Documents/Jira Analysis/jiras")
channel <- odbcConnectAccess2007(db)
# Get data
data <- sqlQuery( channel , paste ("select *
from general_report"))
db<-file.path("C:/Users/jcompto8/Documents/Jira Analysis/jiras.accdb")
channel <- odbcConnectAccess2007(db)
# Get data
data <- sqlQuery( channel , paste ("select *
from general_report"))
data <- sqlQuery( channel , paste ("select * from general_report"))
db<-file.path("C:/Users/jcompto8/Documents/Jira Analysis/jiras.accdb")
channel <- odbcConnectAccess2007(db)
# Get data
MyQuery <-  "select * from general_report"
data <- sqlQuery( channel , MyQuery )
cls
cls()
library(RODBC)
# Connect to Access db
#channel <- odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")
#channel <- odbcConnectAccess("C:/Users/jcompto8/Documents/Jira Analysis/jiras")
db<-file.path("C:/Users/jcompto8/Documents/Jira Analysis/jiras.accdb")
channel <- odbcConnectAccess2007(db)
# Get data
MyQuery <-  "select * from general_report"
data <- sqlQuery( channel , MyQuery )
# Load RODBC package
library(RODBC)
# Connect to Access db
#channel <- odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")
#channel <- odbcConnectAccess("C:/Users/jcompto8/Documents/Jira Analysis/jiras")
db<-file.path("C:/Users/jcompto8/Documents/Jira Analysis/Jiras.accdb")
channel <- odbcConnectAccess2007(db)
# Get data
MyQuery <-  "select * from general_report"
data <- sqlQuery( channel , MyQuery )
# Get data A more complicated example specifying fields
#data <- sqlQuery( channel , paste ("select Year,
#                                   [Name of Student],
#                                   Identification
#                                   from Name_of_table_in_my_database"))
#odbcDataSources()
# Use to see that 's available.
# Load RODBC package
library(RODBC)
# Connect to Access db
#channel <- odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")
#channel <- odbcConnectAccess("C:/Users/jcompto8/Documents/Jira Analysis/jiras")
db<- "C:/Users/jcompto8/Documents/Jira Analysis/Jiras.accdb"
channel <- odbcConnectAccess2007(db)
# Get data
MyQuery <-  "select * from general_report"
data <- sqlQuery( channel , MyQuery )
# Get data A more complicated example specifying fields
#data <- sqlQuery( channel , paste ("select Year,
#                                   [Name of Student],
#                                   Identification
#                                   from Name_of_table_in_my_database"))
#odbcDataSources()
# Use to see that 's available.
channel <- odbcConnectAccess2007(db, uid = "", pwd = "", rows_at_time = 100, readOnlyOptimize = TRUE)
db<- "C:/Users/jcompto8/Documents/Jira Analysis/Jiras.accdb"
channel <- odbcConnectAccess(db, uid = "", pwd = "", rows_at_time = 100, readOnlyOptimize = TRUE)
db<- "C:\\Users\\jcompto8\\Documents\\Jira Analysis\\Jiras.accdb"
channel <- odbcConnectAccess2007(db, uid = "", pwd = "", rows_at_time = 100, readOnlyOptimize = TRUE)
# Get data
MyQuery <-  "select * from general_report"
data <- sqlQuery( channel , MyQuery )
cls()
# Load RODBC package
library(RODBC)
# Connect to Access db
#channel <- odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")
#channel <- odbcConnectAccess("C:/Users/jcompto8/Documents/Jira Analysis/jiras")
db<- "C:\\Users\\jcompto8\\Documents\\Jira Analysis\\Jiras"
channel <- odbcConnectAccess2007(db, uid = "", pwd = "", rows_at_time = 100, readOnlyOptimize = TRUE)
# Get data
MyQuery <-  "select * from general_report"
data <- sqlQuery( channel , MyQuery )
# Get data A more complicated example specifying fields
#data <- sqlQuery( channel , paste ("select Year,
#                                   [Name of Student],
#                                   Identification
#                                   from Name_of_table_in_my_database"))
#odbcDataSources()
# Use to see that 's available.
db<- "C:\\Users\\jcompto8\\Documents\\Jira Analysis\\Jiras.accdb"
channel <- odbcConnectAccess2007(db, uid = "", pwd = "", rows_at_time = 100, readOnlyOptimize = TRUE)
db2<-"Jiras"
channel <- odbcConnectAccess2007(db2, uid = "", pwd = "", rows_at_time = 100, readOnlyOptimize = TRUE)
# Get data
MyQuery <-  "select * from general_report"
data <- sqlQuery( channel , MyQuery )
db2<-"Jiras"
channel <- odbcConnectAccess(db2, uid = "", pwd = "", rows_at_time = 100, readOnlyOptimize = TRUE)
cls()
odbcDataSources()
setwd("~/GitHub/RPrograms")
cls()
